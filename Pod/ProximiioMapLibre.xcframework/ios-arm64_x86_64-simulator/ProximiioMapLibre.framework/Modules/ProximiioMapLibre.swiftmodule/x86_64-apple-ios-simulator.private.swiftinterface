// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ProximiioMapLibre
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Alamofire
import Combine
import CoreLocation
import CrystDBCipher
import Foundation
import JavaScriptCore
import MapKit
import Mapbox
import Mustache
import Network
import Proximiio
import Speech
import Swift
import SwiftyJSON
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PIODatabase : NSObject {
  @objc public class func sharedInstance() -> PIODatabase
  @objc public func amenities() -> [ProximiioAmenity]
  @objc public func amenityCategories() -> [ProximiioAmenityCategory]
  @objc public func campuses() -> [ProximiioCampus]
  @objc public var _featuresDb: [ProximiioGeoJSON] {
    @objc get
  }
  @objc public func features() -> [ProximiioGeoJSON]
  @objc public func pois() -> [ProximiioGeoJSON]
  @objc public func poisAndLevelChanger() -> [ProximiioGeoJSON]
  public func features(search: String..., userLocation: CLLocationCoordinate2D? = nil, filter: PIOFilter? = nil) -> [ProximiioGeoJSON]
  public func features(filter: PIOFilter, search: String...) -> [ProximiioGeoJSON]
  public func features(filter: PIOFilter, search: [String]) -> [ProximiioGeoJSON]
  @objc deinit
}
@objc public class PIORoute : NSObject {
  @objc public var from: CLLocationCoordinate2D
  @objc public var fromLevel: Int
  @objc public var destination: ProximiioGeoJSON
  @objc public var isPreview: Swift.Bool
  @objc public var nodeList: [PIORouteNode]
  @objc final public let configuration: PIORouteConfiguration
  @objc public init(configuration: PIORouteConfiguration, routeStepList: [PIORouteStep])
  @objc public func getLineStringFeatureList() -> [ProximiioGeoJSON]
  public func getRoutePaths(position: CLLocationCoordinate2D?, index: Int, callback: @escaping ([ProximiioGeoJSON], [ProximiioGeoJSON]) -> Void)
  @objc public func lineStringUntil(endNodeIndex: Int, lastPoint: CLLocationCoordinate2D) -> [ProximiioGeoJSON]
  @objc public func lineStringFrom(startNodeIndex: Int, firstPoint: CLLocationCoordinate2D) -> [ProximiioGeoJSON]
  @objc deinit
}
extension PIORoute {
  @objc dynamic public var summary: [String : Any] {
    @objc get
  }
}
extension CLLocationCoordinate2D : Equatable {
}
public func == (lhs: CLLocationCoordinate2D, rhs: CLLocationCoordinate2D) -> Bool
extension ProximiioGeoJSON {
  public var jsonValue: JSON? {
    get
  }
  public var amenity: String {
    get
  }
  public var priority: Int {
    get
  }
  public var images: [String] {
    get
  }
  public var coordinates: [Any] {
    get
  }
  public var campusId: String? {
    get
  }
}
extension ProximiioGeoJSON {
  public var shape: MGLShape? {
    get
  }
  public var coordinate: CLLocationCoordinate2D? {
    get
  }
  public var point: MGLPointFeature? {
    get
  }
  public var polylinePoint: MGLPointFeature? {
    get
  }
  public var polyline: MGLPolylineFeature? {
    get
  }
  public var lineLenght: Double {
    get
  }
  public var isFixed: Bool {
    get
  }
  public var isPOI: Bool {
    get
  }
  public var isConnector: Bool {
    get
  }
  public func toDictionary() -> [String : Any?]
  public func toJSON() -> JSON
  public func getTitle(language: String = Current.language) -> String
  public var icon: UIImage? {
    get
  }
}
extension Array where Element == ProximiioGeoJSON {
  public var amenities: [ProximiioAmenity] {
    get
  }
  public func sortedByDistance(from position: CLLocationCoordinate2D) -> [ProximiioGeoJSON]
}
extension ProximiioCampus {
  public func getPolygonAsFeature() -> ProximiioGeoJSON?
}
@objc @_inheritsConvenienceInitializers open class PIORouteHeading : CLHeading {
  @objc override dynamic open var magneticHeading: CLLocationDirection {
    @objc get
    @objc set
  }
  @objc override dynamic open var trueHeading: CLLocationDirection {
    @objc get
    @objc set
  }
  @objc override dynamic open var headingAccuracy: CLLocationDirection {
    @objc get
    @objc set
  }
  @objc override dynamic open var timestamp: Date {
    @objc get
    @objc set
  }
  @objc override dynamic open var x: CLHeadingComponentValue {
    @objc get
    @objc set
  }
  @objc override dynamic open var y: CLHeadingComponentValue {
    @objc get
    @objc set
  }
  @objc override dynamic open var z: CLHeadingComponentValue {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: NSCoder)
  @objc override dynamic open func encode(with coder: NSCoder)
  public init(trueHeading: CLLocationDirection, magnetic: CLLocationDirection)
  @objc deinit
}
extension CLLocationCoordinate2D {
  public func distance(_ point: CLLocationCoordinate2D) -> Double
}
@objc public class PIORouteConfiguration : NSObject {
  final public let start: ProximiioGeoJSON?
  final public let destination: ProximiioGeoJSON
  final public let waypointList: [PIOWaypoint]
  final public let wayfindingOptions: PIOWayfindingOptions
  @objc public init(start: ProximiioGeoJSON? = nil, destination: ProximiioGeoJSON, waypointList: [PIOWaypoint], wayfindingOptions: PIOWayfindingOptions)
  @objc public func getUpdatedConfig(start: ProximiioGeoJSON, waypointsCompleted: Int) -> PIORouteConfiguration
  @objc deinit
}
@objc public protocol PIOTelemetryProtocol {
  @objc var date: NSDate { get set }
  @objc var identifier: String { get set }
  @objc func toDictionary() -> [String : Any]
}
@_inheritsConvenienceInitializers @objc public class PIOTelemetry : NSObject {
  @objc public var isActive: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PIOAnnotation : MGLPointAnnotation {
  public var level: Swift.Int
  public var image: UIKit.UIImage
  public var isHidden: Swift.Bool
  public var onTap: ((PIOAnnotation) -> Void)?
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PIOTurf {
  public static func nearPointOnLine(point: CLLocationCoordinate2D, line: [CLLocationCoordinate2D]) -> ProximiioPointOnLine?
  @objc deinit
}
extension PIOTurf {
  public static func inside(point: CLLocationCoordinate2D, poly: [Any]) -> Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PIOGuidanceHeadingCorrectionManager : NSObject {
  public static let shared: PIOGuidanceHeadingCorrectionManager
  public var wrongWayThresholdMeters: Swift.Double
  public var wrongWayCancelRouteAfter: Swift.Int
  public var wrongWayCancelRouteEnabled: Swift.Bool
  public var callback: PIOHeadingCorrectionCallback?
  public var lastHeading: CLHeading?
  public var wrongDirectionCount: Swift.Int {
    get
  }
  public var stepCounts: () -> Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PIORouteResponse : NSObject {
  @objc deinit
}
public struct World {
  public var language: Swift.String {
    mutating get
    set
  }
  public var router: PIORouter
  public var audioManager: PIOAudioManager
  public var telemetry: PIOTelemetry
  public var wayFinder: PIOWayfinder2
}
public var Current: World
public struct PIORouteNearestPoint {
}
@_inheritsConvenienceInitializers @objc public class PIORouter : NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension PIORouter {
  public func getRouteSplits(splits: [PIORouteSplit]) -> [PIORouteSplit]?
  public func constructRoute(configuration: PIORouteConfiguration, splits: [PIORouteSplit]?) -> PIORoute?
  public func elaborateOsrm(from json: JSON, splits: [PIORouteSplit])
  public func elaborateOsrmSingle(from json: JSON, splits: [PIORouteSplit])
}
extension PIOGuidance {
  public enum Route {
    case on(PIORoute?)
    case event(type: PIORouteUpdateType, text: String, additionalText: String?, data: PIORouteUpdateData?)
  }
  public enum Event {
    case entered(ProximiioGeoJSON)
    case exit(ProximiioGeoJSON)
  }
  public enum EventList {
    case entered([PIOLandmark])
    case exit([ProximiioGeoJSON])
  }
  public enum Action {
    case route(Route)
    case hazard(Event)
    case segment(Event)
    case decision(Event)
    case landmark(EventList)
    case tts
    case ttsText(String?)
  }
}
@_hasMissingDesignatedInitializers public class PIOGuidance {
  public static let shared: PIOGuidance
  public var action: Combine.PassthroughSubject<PIOGuidance.Action, Swift.Never>
  public var stepImmediateThreshold: Swift.Double
  public var stepPreparationThreshold: Swift.Double
  public var isPreview: Swift.Bool {
    get
    set
  }
  public func ttsHeadingCorrectionEnabled(enabled: Bool)
  public func ttsHeadingCorrectionRepeat(enabled: Bool)
  public func ttsHeadingCorrectionThresholds(thresholdMeters: Double)
  public func ttsHeadingCorrectionWrongWayCancel(after: Int)
  public func ttsHeadingCorrectionWrongWayCancel(enabled: Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PIOHeading : NSObject {
  @objc public var text: String
  @objc public var rotation: Double
  @objc deinit
}
@objc public class PIORouteUpdateData : NSObject {
  @objc public var nodeIndex: Int
  @objc public var stepBearing: Double
  @objc public var stepDirection: PIOGuidanceDirection
  @objc public var stepDistance: Double
  @objc public var stepDistanceTotal: Double
  @objc public var nextStepBearing: NSNumber?
  @objc public var nextStepDistance: NSNumber?
  @objc public var nextStepDirection: PIOGuidanceDirection
  @objc public var position: CLLocationCoordinate2D
  @objc public var pathLengthRemaining: Double
  @objc public var stepHeading: PIOHeading {
    @objc get
  }
  public init(nodeIndex: Int, stepBearing: Double, stepDirection: PIOGuidanceDirection, stepDistance: Double, stepDistanceTotal: Double, nextStepBearing: Double?, nextStepDistance: Double?, nextStepDirection: PIOGuidanceDirection?, position: CLLocationCoordinate2D, pathLengthRemaining: Double)
  @objc deinit
}
@objc public enum PIOLandmarkSide : Int {
  case left, right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PIOLandmark : NSObject {
  @objc public var side: PIOLandmarkSide
  @objc public var feature: ProximiioGeoJSON
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PIOOsrmRoute : NSObject {
  @objc deinit
}
@objc public class PIOWayfindingOptions : NSObject {
  @objc public var avoidBarriers: Swift.Bool
  @objc public var avoidElevators: Swift.Bool
  @objc public var avoidEscalators: Swift.Bool
  @objc public var avoidNarrowPaths: Swift.Bool
  @objc public var avoidRamps: Swift.Bool
  @objc public var avoidRevolvingDoors: Swift.Bool
  @objc public var avoidStaircases: Swift.Bool
  @objc public var avoidTicketGates: Swift.Bool
  @objc public var pathFixDistance: Swift.Double
  @objc public init(avoidElevators: Bool, avoidBarriers: Bool, avoidEscalators: Bool, avoidNarrowPaths: Bool, avoidRamps: Bool, avoidRevolvingDoors: Bool, avoidStaircases: Bool, avoidTicketGates: Bool, pathFixDistance: Double)
  @objc deinit
}
@objc public enum PIOGuidanceDirection : Int, Equatable {
  case none
  case start, turnAround, finish, straight
  case leftSlight, leftNormal, leftHard
  case rightSlight, rightNormal, rightHard
  case upElevator, upEscalator, upStairs
  case downElevator, downEscalator, downStairs
  case exitElevator, exitEscalator, exitStairs
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PIOGuidanceDirection {
  public func isLevelChange() -> Bool
  public func isTurn() -> Bool
  public func isLevelChangeExit() -> Bool
}
public class PIOTurfRing {
  public var coordinates: [CLLocationCoordinate2D]
  public init(coordinates: [CLLocationCoordinate2D])
  @objc deinit
}
extension PIOTurfRing {
  public func contains(_ coordinate: CLLocationCoordinate2D, ignoreBoundary: Bool = false) -> Bool
}
@objc public class ProximiioMapLibreConfiguration : NSObject {
  final public let token: String
  @objc public var showRasterFloorplans: Swift.Bool
  @objc public var showGeoJSONFloorplans: Swift.Bool
  @objc public var showPOIs: Swift.Bool
  @objc public var showUserLocation: Swift.Bool
  @objc public init(token: String)
  @objc override dynamic public func isEqual(_ object: Any?) -> Bool
  @objc deinit
}
@objc public enum ProximiioMapLibreAuthorizationResult : Int {
  case success
  case invalid
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ProximiioMapLibreNetworkResult : Int {
  case success
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ProximiioMapLibreInteraction {
  @objc func change(floor: Int)
  @objc func onTap(feature: ProximiioGeoJSON?)
  @objc func onRequestReRoute()
  @objc func onFollowingUserUpdate(_ isFollowing: Bool)
}
@objc public protocol ProximiioMapLibreNavigation {
  @objc func onRoute(route: PIORoute?)
  @objc func routeEvent(eventType type: PIORouteUpdateType, text: String, additionalText: String?, data: PIORouteUpdateData?)
  @objc func onHazardEntered(_ hazard: ProximiioGeoJSON)
  @objc func onSegmentEntered(_ segment: ProximiioGeoJSON)
  @objc func onDecisionEntered(_ decision: ProximiioGeoJSON)
  @objc func onLandmarkEntered(_ landmarks: [PIOLandmark])
  @objc func onHazardExit(_ hazard: ProximiioGeoJSON)
  @objc func onSegmentExit(_ segment: ProximiioGeoJSON)
  @objc func onDecisionExit(_ decision: ProximiioGeoJSON)
  @objc func onLandmarkExit(_ landmarks: [ProximiioGeoJSON])
  @objc func onPositionUpdate(_ position: CLLocationCoordinate2D)
  @objc func onHeadingUpdate(_ heading: Double)
  @objc func onTTS()
  @objc func onTTSDirection(text: String?)
}
@_inheritsConvenienceInitializers @objc final public class ProximiioMapLibre : NSObject, URLSessionDelegate {
  @objc public static let shared: ProximiioMapLibre
  final public var headingOrientation: CLDeviceOrientation
  final public var authorizationStatus: CLAuthorizationStatus
  final public var debugShowDevelopmentRoutes: Swift.Bool
  @objc final public var shakyHandsMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc weak final public var mapInteraction: ProximiioMapLibreInteraction?
  @objc weak final public var mapNavigation: ProximiioMapLibreNavigation?
  @objc weak final public var mapView: MGLMapView?
  @objc final public var patchGroundLevel: Swift.Int
  @objc final public var blacklistRenderAmenitiesIds: [Swift.String] {
    @objc get
    @objc set
  }
  @objc final public var levelNameMapper: [Int : String] {
    @objc get
    @objc set
  }
  @objc final public var styleURL: URL? {
    @objc get
  }
  @objc final public var style: ProximiioMapStyle? {
    @objc get
  }
  @objc final public var userLocation: ProximiioLocation?
  @objc final public var userFloor: ProximiioFloor? {
    @objc get
  }
  final public var lastUserLocation: CLLocationCoordinate2D?
  @objc final public var mapFloor: Int {
    @objc get
    @objc set
  }
  @objc final public var database: PIODatabase
  @objc final public var customOSRMPath: String?
  final public var navigation: PIONavigation {
    get
  }
  @objc final public var followingUser: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public func setConfiguration(newConfiguration: ProximiioMapLibreConfiguration)
  @objc final public func initialize(_ completion: @escaping (_ result: ProximiioMapLibreAuthorizationResult) -> Void)
  @objc final public func enableNavigation(_ mapView: MGLMapView? = nil)
  @objc final public func setup(mapView: MGLMapView?, configuration: ProximiioMapLibreConfiguration)
  final public func resetMap()
  @objc deinit
  @objc override dynamic public init()
}
extension ProximiioMapLibre {
  @objc final public func setLevel(level: Int)
}
extension ProximiioMapLibre {
  @objc final public func routeCalculate(configuration: PIORouteConfiguration, callback: @escaping ((PIORoute?) -> Void))
  @objc final public func routeFind(configuration: PIORouteConfiguration, callback: @escaping ((PIORoute?) -> Void))
  @objc final public func routeFindAndPreview(configuration: PIORouteConfiguration, callback: @escaping ((PIORoute?) -> Void))
  @objc final public func routeFindAndStart(configuration: PIORouteConfiguration, callback: @escaping ((PIORoute?) -> Void))
  @objc final public func navigate(configuration: PIORouteConfiguration, preview: Bool, start: Bool, callback: @escaping ((PIORoute?) -> Void))
}
extension ProximiioMapLibre {
  @objc final public func routeStart(_ route: PIORoute? = nil)
  @objc final public func routeCancel(silent: Bool)
  final public func routeRender(routes: [(PIORoute?, Bool)], source: String)
  @objc final public func routeRender(_ route: PIORoute? = nil, source: String, clear: Bool = false, isAlternate: Bool = false)
  @objc final public func routePreview(_ route: PIORoute? = nil)
  @objc final public func repeatLastInstruction()
}
extension ProximiioMapLibre {
  @objc final public func floorUp()
  @objc final public func floorDown()
  @objc final public func floorAt(_ floor: Int)
}
extension ProximiioMapLibre {
  final public func enableSimulationWalk(enabled: Bool)
  final public func pauseSimulationWalk(paused: Bool)
  final public func stepLenghtSimulation(length: Double)
}
extension ProximiioMapLibre : MGLMapViewDelegate {
  final public func showPreviewDestinationMarker(_ image: UIImage?, coordinate: CLLocationCoordinate2D?, level: Int?)
  final public func hidePreviewDestinationMarker()
}
extension ProximiioMapLibre {
  @objc final public func centerAtUser(zoom: Double = 20, animated: Bool = true, completed: ((Bool) -> Void)? = nil)
  @objc final public func centerAtFeature(_ feature: ProximiioGeoJSON, zoom: Double = 20, animated: Bool = true, completed: ((ProximiioGeoJSON) -> Void)? = nil)
  @objc final public func centerAt(_ coordinate: CLLocationCoordinate2D, zoom: Double = 20, animated: Bool = true, completed: ((Bool) -> Void)? = nil)
}
extension ProximiioMapLibre {
  @objc final public func say(text: String)
}
public enum PIOConstants {
}
extension ProximiioAmenity {
  public var json: JSON {
    get
  }
  public var image: UIImage? {
    get
  }
}
@objc public protocol PIOWaypoint {
}
@objc public class SimpleWaypoint : NSObject, PIOWaypoint {
  @objc public var feature: ProximiioGeoJSON
  public init(feature: ProximiioGeoJSON)
  @objc deinit
}
@objc public class VariableWaypoint : NSObject, PIOWaypoint {
  @objc public var features: [ProximiioGeoJSON]
  public init(features: [ProximiioGeoJSON])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PIOGuidanceTTS {
  public static let shared: PIOGuidanceTTS
  public var isPreview: Swift.Bool
  public var action: Combine.PassthroughSubject<PIOGuidanceTTS.Action, Swift.Never>
  public var headingCorrectionEnabled: Swift.Bool {
    get
  }
  public var headingCorrectionAllowsRepeat: Swift.Bool {
    get
  }
  public func resetLastSpoken()
  public func speakTts(text: String, priority: Bool = false, force: Bool = false)
  @objc deinit
}
extension PIOGuidanceTTS {
  public enum Action {
    case onTTS
    case ttsText(String?)
  }
}
@_hasMissingDesignatedInitializers public class PIODebug {
  public enum PIODebugSource {
    case app, map, sdk, network, database, generic
    public static func == (a: PIODebug.PIODebugSource, b: PIODebug.PIODebugSource) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func log(source: PIODebugSource = .generic, _ objects: Any, fileName: String = #file, lineNumber: Int = #line)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PIOWayfinder2 : NSObject {
  @objc public func findPath(from: ProximiioGeoJSON, to: ProximiioGeoJSON, featureList: [ProximiioGeoJSON], options: PIOWayfindingOptions) -> [ProximiioGeoJSON]?
  @objc deinit
}
@objc public protocol PIOFilter {
  @objc func filterTag() -> String
  @objc func inputNames() -> [String]
  @objc func filterItem(feature: ProximiioGeoJSON, input: [String]) -> Bool
}
public struct PIOTurfBoundingBox {
  public init?(from coordinates: [CLLocationCoordinate2D]?)
  public init(_ northWest: CLLocationCoordinate2D, _ southEast: CLLocationCoordinate2D)
  public func contains(_ coordinate: CLLocationCoordinate2D) -> Bool
  public var northWest: CLLocationCoordinate2D
  public var southEast: CLLocationCoordinate2D
}
@objc public class PIOUnitConversion : NSObject {
  @objc public init(stageList: [UnitStage])
  @objc deinit
}
extension PIOUnitConversion {
  public static let Default: PIOUnitConversion
}
extension PIOUnitConversion {
  @objc public class UnitStage : NSObject {
    @objc final public let unitName: String
    @objc final public let unitConversionToMeters: Double
    @objc final public let minValueInMeters: Double
    @objc final public let decimals: Int
    @objc public init(unitName: String, unitConversionToMeters: Double, minValueInMeters: Double, decimals: Int)
    @objc deinit
  }
}
extension PIOUnitConversion {
  @_inheritsConvenienceInitializers @objc public class Builder : NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PIOAudioManager : NSObject {
  public enum StatePlayed {
    case finished
    case canceled
    case error
    public static func == (a: PIOAudioManager.StatePlayed, b: PIOAudioManager.StatePlayed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PlayableItem {
    case sound(item: AVPlayerItem, completion: ((StatePlayed) -> Void)?)
    case speech(item: AVSpeechUtterance, completion: ((StatePlayed) -> Void)?)
  }
  public var avoidRepeatSameMessage: Swift.Bool
  public var speechSynthesizer: AVSpeechSynthesizer {
    get
    set
  }
  public var queuePlayer: AVQueuePlayer {
    get
    set
  }
  public func schedulePlay(playerItem: AVPlayerItem, force: Bool = false, completion: ((StatePlayed) -> Void)?)
  public func scheduleSpeech(utterance: AVSpeechUtterance, force: Bool = false, completion: ((StatePlayed) -> Void)?)
  public func startPlaying()
  public func remove(playerItems: [AVPlayerItem])
  public func abortPlaying()
  @objc public func playerItemDidFinishPlaying(_ notification: Notification)
  @objc deinit
}
extension PIOAudioManager : AVSpeechSynthesizerDelegate {
  @objc dynamic public func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didFinish utterance: AVSpeechUtterance)
}
extension AVSpeechUtterance {
  convenience public init(string: String, voice: AVSpeechSynthesisVoice? = nil)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PIONavigation : NSObject, PIONavigationDelegate {
  @objc public static let shared: PIONavigation
  public var action: Combine.PassthroughSubject<PIONavigation.Action, Swift.Never>
  @objc public func setStepImmediateThreshold(inMeters threshold: Double)
  @objc public func setStepPreparationThreshold(inMeters threshold: Double)
  @objc public func setRouteFinishThreshold(inMeters threshold: Double)
  @objc public func setReRouting(inMeters threshold: Double)
  @objc public func setReRouting(automatic: Bool)
  @objc public func setReRouting(enabled: Bool)
  @objc public func setMapboxMap(mapboxMap: MGLMapView?)
  @objc public func setUnitConversion(conversion: PIOUnitConversion)
  @objc public func hazardCallback(callback: PIOHazardCallback?)
  @objc public func segmentCallback(callback: PIOSegmentCallback?)
  @objc public func decisionCallback(callback: PIODecisionCallback?)
  @objc public func headingCorrectionCallback(callback: PIOHeadingCorrectionCallback?)
  @objc public func ttsLandmarkAlert(enabled: Bool, metadataKeys: [Int])
  @objc public func landmarksCallback(callback: PIOLandmarkCallback?)
  @objc public func ttsEnable(enable: Bool)
  @objc public func ttsDisable()
  @objc public func ttsHazardAlert(enabled: Bool, metadataKeys: [Int])
  @objc public func ttsDestinationAlert(enabled: Bool, metadataKeys: [Int])
  @objc public func ttsSegmentAlert(enterEnabled: Bool, exitEnabled: Bool, metadataKeys: [Int])
  @objc public func ttsDecisionAlert(enabled: Bool, metadataKeys: [Int])
  @objc public func ttsLevelChangerMetadataKeys(metadataKeys: [Int])
  @objc public func ttsHeadingCorrection(enabled: Bool)
  @objc public func ttsHeadingCorrectionRepeat(enabled: Bool)
  @objc public func ttsHeadingCorrectionThreshold(meters: Double)
  @objc public func ttsHeadingCorrectionWrongWayCancel(after: Int)
  @objc public func ttsHeadingCorrectionWrongWayCancel(enabled: Bool)
  @objc public func ttsMetadataKeys(indexes: [Int])
  @objc public func ttsRepeatLastInstruction()
  @objc public func ttsReassuranceInstruction(enabled: Bool)
  @objc public func ttsReassuranceInstruction(distance: Double)
  @objc public func ttsSoonUpdateThreshold(thresholdMeters: Double)
  @objc public var route: PIORoute? {
    get
  }
  @objc public var routeLastNodeIndex: Swift.Int {
    @objc get
  }
  @objc public var remainingRoute: [ProximiioGeoJSON]
  @objc public var completedRoute: [ProximiioGeoJSON]
  @objc public var closestPointToRoute: ProximiioPointOnLine?
  @objc weak public var routeDelegate: PIORouteDelegate?
  public var routeStarted: Swift.Bool
  @objc public func routeCalculate(routeConfiguration: PIORouteConfiguration, callback: @escaping ((PIORoute?) -> Void))
  @objc public func routeFind(routeConfiguration: PIORouteConfiguration, previewRoute: Bool, startRoute: Bool, callback: @escaping ((PIORoute?) -> Void), isReRouting: Bool = false)
  @objc public func routeCancel(silent: Bool = false)
  @objc public func set(_ route: PIORoute)
  @objc public func cancelRoute()
  @objc public func routePreview() -> Bool
  @discardableResult
  @objc public func routeStart() -> Bool
  @objc public func processUserLocation(_ position: CLLocationCoordinate2D, force: Bool)
  @objc public func updateUserLevel(level: Int)
  public func clearRouteData()
  @objc deinit
}
extension PIONavigation {
  public enum Action {
    case onProcess(node: PIORouteNode?)
    case onRequestReRoute
    case onFinished
  }
}
extension PIONavigation {
  public func showCustom(route: [ProximiioGeoJSON], for style: String)
  public func hideCustomRoute(with style: String)
}
@_hasMissingDesignatedInitializers @objc public class PIORouteNode : NSObject {
  @objc public var bearingFromLastNode: Double
  @objc public var coordinates: CLLocation
  @objc public var direction: PIOGuidanceDirection
  @objc public var distanceFromLastNode: Double
  @objc public var level: Int
  @objc public var isWaypoint: Bool
  @objc public var waypointId: String?
  @objc public var levelChangerId: String?
  @objc public var lineStringFeatureTo: ProximiioGeoJSON?
  @objc public var lineStringCoordinates: [CLLocationCoordinate2D]
  @objc public var text: Swift.String
  public static func == (lhs: PIORouteNode, rhs: PIORouteNode) -> Bool
  @objc deinit
}
@objc public class PIORouteSplit : NSObject {
  @objc final public let from: ProximiioGeoJSON
  @objc final public let toConnector: ProximiioGeoJSON?
  @objc final public let toDestination: ProximiioGeoJSON?
  @objc final public let toWaypoint: ProximiioGeoJSON?
  @objc final public let campusId: String?
  @objc final public let splits: [PIORouteSplit]
  @objc public var wayfindingPath: [ProximiioGeoJSON]?
  @objc public var osrmPath: PIOOsrmRoute?
  public var pathWeight: Double?
  public var sumWeight: Double?
  @objc public var to: ProximiioGeoJSON? {
    @objc get
  }
  @objc public init(from: ProximiioGeoJSON, toConnector: ProximiioGeoJSON? = nil, toDestination: ProximiioGeoJSON? = nil, toWaypoint: ProximiioGeoJSON? = nil, campusId: String? = nil, splits: [PIORouteSplit])
  @objc deinit
}
@objc public protocol PIONavigationDelegate {
  @objc func setStepImmediateThreshold(inMeters threshold: Double)
  @objc func setStepPreparationThreshold(inMeters threshold: Double)
  @objc func setRouteFinishThreshold(inMeters threshold: Double)
  @objc func setReRouting(inMeters threshold: Double)
  @objc func setReRouting(automatic: Bool)
  @objc func setUnitConversion(conversion: PIOUnitConversion)
  @objc func hazardCallback(callback: PIOHazardCallback?)
  @objc func segmentCallback(callback: PIOSegmentCallback?)
  @objc func decisionCallback(callback: PIODecisionCallback?)
  @objc func headingCorrectionCallback(callback: PIOHeadingCorrectionCallback?)
  @objc func landmarksCallback(callback: PIOLandmarkCallback?)
  @objc func ttsEnable(enable: Bool)
  @objc func ttsDisable()
  @objc func ttsHazardAlert(enabled: Bool, metadataKeys: [Int])
  @objc func ttsDestinationAlert(enabled: Bool, metadataKeys: [Int])
  @objc func ttsSegmentAlert(enterEnabled: Bool, exitEnabled: Bool, metadataKeys: [Int])
  @objc func ttsDecisionAlert(enabled: Bool, metadataKeys: [Int])
  @objc func ttsLevelChangerMetadataKeys(metadataKeys: [Int])
  @objc func ttsHeadingCorrection(enabled: Bool)
  @objc func ttsHeadingCorrectionRepeat(enabled: Bool)
  @objc func ttsHeadingCorrectionThreshold(meters: Double)
  @objc func ttsLandmarkAlert(enabled: Bool, metadataKeys: [Int])
  @objc func ttsMetadataKeys(indexes: [Int])
  @objc func ttsRepeatLastInstruction()
  @objc func ttsReassuranceInstruction(enabled: Bool)
  @objc func ttsReassuranceInstruction(distance: Double)
  @objc func ttsSoonUpdateThreshold(thresholdMeters: Double)
  @objc func routeCancel(silent: Bool)
  @objc func routePreview() -> Bool
  @objc func routeStart() -> Bool
  @objc func processUserLocation(_ position: CLLocationCoordinate2D, force: Bool)
  @objc func updateUserLevel(level: Int)
}
@objc public protocol PIOHazardCallback {
  @objc func enteredHazardRange(hazard: ProximiioGeoJSON)
  @objc func exitedHazardRange(hazard: ProximiioGeoJSON)
}
@objc public protocol PIOSegmentCallback {
  @objc func onSegmentEntered(segment: ProximiioGeoJSON)
  @objc func onSegmentLeft(segment: ProximiioGeoJSON)
}
@objc public protocol PIODecisionCallback {
  @objc func decisionEntered(segment: ProximiioGeoJSON)
  @objc func decisionExited(segment: ProximiioGeoJSON)
}
@objc public protocol PIOHeadingCorrectionCallback {
  @objc func onHeadingCorrection(degress: Double)
}
@objc public protocol PIOLandmarkCallback {
  @objc func onLandmarkEnteredRange(landmarkList: [PIOLandmark])
  @objc func onLandmarkExitedRange(landmarkList: [ProximiioGeoJSON])
}
@objc public protocol PIORouteDelegate {
  @objc func onRoute(route: PIORoute?)
  @objc func routeEvent(eventType type: PIORouteUpdateType, text: String, additionalText: String?, data: PIORouteUpdateData?)
  @objc func onHazardEntered(_ hazard: ProximiioGeoJSON)
  @objc func onSegmentEntered(_ segment: ProximiioGeoJSON)
  @objc func onDecisionEntered(_ decision: ProximiioGeoJSON)
  @objc func onLandmarkEntered(_ landmark: [PIOLandmark])
  @objc func onHazardExit(_ hazard: ProximiioGeoJSON)
  @objc func onSegmentExit(_ segment: ProximiioGeoJSON)
  @objc func onDecisionExit(_ decision: ProximiioGeoJSON)
  @objc func onLandmarkExit(_ landmark: [ProximiioGeoJSON])
}
@objc public enum PIORouteUpdateType : Int {
  case calculating, recalculating, routeNotfound, canceled, finished, osrmNetworkError, canceledWrongWay
  case new, update, soon, immediate
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class PIORouteStep : NSObject {
  @objc public init(node: ProximiioGeoJSON, level: Int, pathToNode: ProximiioGeoJSON? = nil, campusId: String? = nil, connector: ProximiioGeoJSON? = nil, waypoint: ProximiioGeoJSON? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PIOReachability : NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension PIOLandmarkSide : Swift.Equatable {}
extension PIOLandmarkSide : Swift.Hashable {}
extension PIOLandmarkSide : Swift.RawRepresentable {}
extension PIOGuidanceDirection : Swift.Hashable {}
extension PIOGuidanceDirection : Swift.RawRepresentable {}
extension ProximiioMapLibreAuthorizationResult : Swift.Equatable {}
extension ProximiioMapLibreAuthorizationResult : Swift.Hashable {}
extension ProximiioMapLibreAuthorizationResult : Swift.RawRepresentable {}
extension ProximiioMapLibreNetworkResult : Swift.Equatable {}
extension ProximiioMapLibreNetworkResult : Swift.Hashable {}
extension ProximiioMapLibreNetworkResult : Swift.RawRepresentable {}
extension PIODebug.PIODebugSource : Swift.Equatable {}
extension PIODebug.PIODebugSource : Swift.Hashable {}
extension PIOAudioManager.StatePlayed : Swift.Equatable {}
extension PIOAudioManager.StatePlayed : Swift.Hashable {}
extension PIORouteUpdateType : Swift.Equatable {}
extension PIORouteUpdateType : Swift.Hashable {}
extension PIORouteUpdateType : Swift.RawRepresentable {}
